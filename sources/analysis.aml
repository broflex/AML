;;; -----------------------------
;;; ANALYSIS DEFINITIONS
;;; -----------------------------

;;; Class responsible for meshing
(define-class link-mesh-class
  :inherit-from (object)
  :properties (
               mesh-object ^link-mesh
               geometry-model-object (default nil)
               (node-set :class 'analysis-node-set-class
                   query-objects-list (list (the nodes-query (:from ^^link-mesh)))
                   )
               )
  :subobjects (
               (link-mesh :class 'paver-mesh-class
                   ;;; geometry-model-object is the link-solid-geometry in link-model-class
				   object-to-mesh ^^geometry-model-object
                   mesh-database-object ^^mesh-database
				   
;;;                for solid mesh use:  element-shape :tet
                   element-shape :quadtri
                   solid-mesh? t
                   )
               
               (link-mesh-surface-elements :class 'mesh-elements-2d-query-class
                   tagged-object-list (append
                                       (the union-list (:from ^^geometry-model-object))
                                       (the visible-members-ref-list (:from  ^^geometry-model-object))
                                       )
                                      
                   mesh-object ^^link-mesh
                   )

               (link-mesh-solid-elements :class 'mesh-elements-3d-query-class
                   tagged-object-list (append
                                       (the union-list (:from ^^geometry-model-object))
                                       (the visible-members-ref-list (:from  ^^geometry-model-object))
                                       )
                   mesh-object ^^link-mesh
                   )

               (mating-surface-nodes :class 'mesh-nodes-query-class
                   ;tagged-object-list (the mating-surface-list (:from ^^geometry-model-object))
                   mesh-object ^^link-mesh
                   )
                                   
                              
               (fixed-nodes :class 'mesh-nodes-query-class
                   tagged-object-list (list
                                       (the fixed-edge (:from ^^geometry-model-object))
                                       )
;                    mesh-object ^^link-mesh
                   )
               (loaded-nodes :class 'mesh-query-nodes-from-interface-class
                   interface-object (the point-ref (:from (the constraint-element (:from (nth 0 ^^solid-constraints-ref-list) ))))
                   mesh-object ^^link-mesh
                   )
               )
  )
(define-class analysis-link-model-class
  :inherit-from (analysis-model-class)
  :properties (
               mesh-model-object nil
               mesh-database-object ^^mesh-database
               
               z-load (default -100.0)
;;;                analysis-type :linear-static
               load-case-objects-list (list ^load-case-1)
               material-catalog-object ^material-catalog
               materials-list (list 'steel)
               property-set-objects-list (list ^link-material-properties)
               
               element-set-2d-objects-list (list ^link-analysis-surface-elements)
               element-set-3d-objects-list (list ^link-analysis-solid-elements)


               mesh-object (the link-mesh (:from ^mesh-model-object))
               node-set-objects-list (list (the node-set (:from ^mesh-model-object)))
               )
  :subobjects (
               (material-catalog :class 'material-catalog-class
                   )
               (link-material-properties :class 'analysis-property-set-2d-type-1-class
                   material-name "Steel"
                   thickness 0.3
                )
               
               (link-analysis-surface-elements :class 'analysis-element-set-2d-type-1-class
                   query-objects-list (list
                                       (the link-mesh-surface-elements (:from ^^mesh-model-object))
                                       )
                   property-set-object ^^link-material-properties
                )
               (link-analysis-solid-elements :class 'analysis-element-set-3d-type-1-class
                   query-objects-list (list
                                       (the link-mesh-solid-elements (:from ^^mesh-model-object))
                                       )
                   property-set-object ^^link-material-properties
                )
               (fixed-nodes-constraint :class 'analysis-constraint-displacement-class
                   target-object (the fixed-nodes (:from ^^mesh-model-object))
                   tx 0.0
                   ty 0.0
                   tz 0.0
                   mx 0.0
                   my 0.0
                   mz 0.0
                   )
               (nodal-load :class 'analysis-load-force-nodal-class
                   target-object (the loaded-nodes
                                   (:from ^^mesh-model-object))
                   load-vector (list 0.0 0.0 ^^z-load)
                   )
               (load-case-1 :class 'analysis-load-case-class
;;;                    load-objects-list (list ^nodal-load)
;;;                    constraint-objects-list (list ^^fixed-nodes-constraint)
                )
               (nastran-interface :class 'nastran-analysis-class
                   analysis-model-object ^superior
                   model-name (the folder (:from ^^mechanism-selection))
                   nastran-file-name (concatenate (write-to-string  (object-name ^^superior)) ".bdf")
                   nastran-version (nth 2 '(:nei-nastran :msc-nastran :nx-nastran))
;;;                    analysis-directory (logical-path "C:\\Users\\Rasmus\\Documents\\NTNU\\Masteroppgave\\forelesning_150326\\mesh\\simple-beam\\")
                   )
               )
  )

;;; -----------------------------
;;; END ANALYSIS DEFINITIONS
;;; -----------------------------  
