;;; Constructs the collecion-class
(define-class collection-class
  :inherit-from (object)
  :properties (
               collection-type nil
               )
  )


;;; Checks if file is accessible and executes the corresponding read method
(define-method read-from-file collection-class ()
  (let (	
        (file-name (write-to-string !collection-type ))
        (file-path (logical-path (the path (:from ^mechanism-selection)) (concatenate file-name ".txt") ) )
		(function-name (read-from-string (concatenate "read-" file-name "-from-file")) )
        ) 
	;if the file exists, open it and call it's read function, else return nil	
    (if (and
         file-path
		 ;The stringp function returns true if the given value is a string and nil if not. 
         (stringp file-path)
		 ;The probe-file function is used to check if a file exists. It returns nil if the file specified does not exist
         (probe-file file-path)
         )
		 ;opens the specified file. the file is opened as a stream and can be accessed using functions like read, read-line etc.
        (with-open-file (file file-path :direction :input)
		;calls the function specified from the file-name
          (apply function-name (list file))
          )
		;This construct groups a list of expressions by executing them sequentially and returning whatever the last expression of the group returns
      (progn
        (message (format nil "\"~a\" is not a valid file path." file-path) :append? t)
        nil
        )
      )
    )
  )
    
;;; Executes the read-from-file and creates the corresponding subobjects for the constraints/joints
(define-class constraint-collection
	;series-object creates "automatically" any specified number(denoted by quantity) of subobjects, they are created from the init-form
	;can be found at page 291 in ref. manual
  :inherit-from (series-object collection-class)
  :properties (
               ;;Traverse to Superior reference
				point-ref-list nil
               collection-type 'constraints
               constraint-list (read-from-file !superior)
               quantity (length ^constraint-list)
			   ;class-expression determines which classes to create as subobjects
               class-expression '(read-from-string (concatenate (nth 1 (nth !index !constraint-list)) "-constraint-class"))
               series-prefix 'c
               init-form '(
                           point-ref (nth (nth 0 (nth !index ^constraint-list)) ^point-ref-list)
                           constraint-type (nth 1 (nth !index ^constraint-list))
                           link-incidence (nth 2 (nth !index ^constraint-list))
						   ;normalize returns the unit vector with the same orientation as the specified vector
                           direction (normalize (nth 3 (nth !index ^constraint-list)))
                           constraint-variable (nth 4 (nth !index ^constraint-list))
                           )
               )
  )

;;; Reads each line of the constraints file and adds this to a list 
(defun read-constraints-from-file (stream)
  (when stream
    (loop for line = (read-line stream nil :eof)
      until (equal line :eof)
      for ls = (string-to-delimited-token-list line :delimiter #\tab :string-token? nil)
      for c-data = (list
                    (nth 0 ls) (nth 1 ls) (read-from-string (nth 2 ls)) (read-from-string (nth 3 ls)) (read-from-string (nth 4 ls))
                    )
      collect c-data
      )
    )
  )


;;; Executes the read-from-file and creates the corresponding subobjects for the points/coordinates
(define-class point-collection
  :inherit-from (series-object collection-class)
  :properties (
               collection-type 'coordinates
               points-list (read-from-file !superior)
               quantity (length ^points-list)
               class-expression 'point-data-model
               series-prefix 'p
               init-form '(
                           coordinates (nth ^index ^points-list)
                           )
               )
  )
;;; Reads each line of the coordinats file and adds this to a list 
(defun read-coordinates-from-file (stream)
  (when stream
    (loop for line = (read-line stream nil :eof)
      until (equal line :eof)
      for xyz = (read-from-string (format nil "(~a)" line)) 
      collect xyz 
      )
    )
  )

;;; Defines the default properties of each shape/link
(define-class shape-data-model
  :inherit-from (object)
  :properties (
				
               link-ref (default 'default)
               sweep-index (default 'default)
               cross-section-type (read-from-string (remove "-section" (write-to-string (default 'circular-section))))
               solid-dimensions '(0.04 0.04)
               point-list nil
               weight-list nil
               )
  )
;;; Executes the read-from-file and creates the corresponding subobjects for the shapes/links
(define-class shape-collection
  :inherit-from (series-object collection-class)
  :properties (
               collection-type 'shapes
               shapes-list (read-from-file !superior)
               quantity (length ^shapes-list)
               class-expression 'shape-data-model
               series-prefix 'shape
               init-form '(
                           link-ref (nth 0 (nth ^index ^shapes-list))
                           sweep-index (nth 1 (nth ^index ^shapes-list))
                           cross-section-type (nth 2 (nth ^index ^shapes-list))
                           solid-dimensions (nth 3 (nth ^index ^shapes-list))
                           point-list (nth 4 (nth ^index ^shapes-list))
                           weight-list (nth 5 (nth ^index ^shapes-list))
                           )
               )
  )

;;; Reads each line of the shapes file and adds this to a list 
(defun read-shapes-from-file (stream)
 (when stream
   (loop for line = (read-line stream  nil :eof)
     until (equal line :eof)
     for ls = (string-to-delimited-token-list line :delimiter #\tab :string-token? nil)
     for shape-data = (list
                       (nth 0 ls) (nth 1 ls) (read-from-string (nth 2 ls)) (read-from-string (nth 3 ls)) (read-from-string (nth 4 ls)) (read-from-string (nth 5 ls))
                       )
     collect shape-data
     )
   )
 )

;;; Creates some UI elements and link subobjects
(define-class link-collection
  :inherit-from (series-object)
  :properties (
				;creates the select cross-section-type dropdown menu
               (cross-section-type :class 'option-property-class
                   label "Cross-section Type"
                   mode 'menu
                   formula (nth 0 !options-list)
                   options-list (reverse (class-direct-defined-subclasses 'section-model))
                   labels-list (loop for option in !options-list
                                 collect (remove "-section" (write-to-string option))
                                 )
                   )
               common-width 0.04
               common-height 0.04
			   ;creates the set cross-sections and dimensions buttons
               property-objects-list (list
                                      (the superior cross-section-type self) 
                                      '("Set all cross-sections" (button1-parameters :set-c button3-parameters :unset)
                                        ui-work-area-action-button-class)

                                      (the superior common-width self)
                                      (the superior common-height self) 
                                      '("Set all dimensions" (button1-parameters :set-d button3-parameters :unset)
                                        ui-work-area-action-button-class)
                                      )
               ;;Traverse to Superior reference
			   ;; Creates a sorted list of all the links involved in the link-incidence of the constraints
               link-list (sort (copy-seq (remove-duplicates (append-list (loop for kid in (the constraints-ref-list) 
                                                                 collect (the link-incidence (:from kid)) 
                                                                 )
                                                               ))
                                        ) '<)
				;initializes the shape-data-model
               (init-default-shape :class 'shape-data-model
                   )
               
			   ;dunno what does yet
               default-shape (let(
                                  (def (loop for shape in (children ^^shapes :class 'shape-data-model)
                                         when (equal 'default (the link-ref (:from shape)))
                                         do(return shape)
                                         ) )
                                  )
                               (if def def ^init-default-shape)
                               )
               
               quantity (length ^link-list)
               class-expression 'link-model-class
               series-prefix 'link
               init-form '(
                           link-index (nth ^index ^^link-list)
                           constraints-incident-on-link-list (loop for kid in (the constraints-ref-list)
                                                               for con = (get-constraint-incidence kid ^link-index)
                                                               when con collect con
                                                               )
                           )
               )
  )

;;; Gets the link reference from a link-collection       !!!!!!!  IS NEVER CALLED ??  !!!!!!!!!!
(define-method get-link-ref link-collection (link-index)
  (nth (position link-index !link-list) ^link-ref-list)
  )
  

;;; Implements the logic behind the buttons for setting cross-section-type and setting dimensions
(define-method work-area-button1-action link-collection (params)
  (case params
    (:set-c
     (loop for l in ^link-ref-list
       do (loop for s in (the members-ref-list (:from (the link-solid-geometry (:from l)) ))
            do (change-value (the cross-section-type self (:from s)) !cross-section-type)
            )
       )
     )
    (:set-d
     (loop for l in ^link-ref-list
       do (loop for s in (the members-ref-list (:from (the link-solid-geometry (:from l)) ))
            do (change-value (the width self (:from s)) !common-width)
            (change-value (the height self (:from s)) !common-height)
            )
       )
     )
    )
  )

;;; Defines the model for subfolders
(define-class folder-info-model
  :inherit-from (object)
  :properties (
               path nil
               folder (subseq (remove #MECHANISM-LIBRARY# ^path) 1)
               label (replace (copy-seq ^folder) " " :start1 (position "-" ^folder :test 'string-equal) )

               class-name (let (
                                (name (read-from-string (concatenate ^folder "-class" ) ))
                                )
                            (when (find-class name)
                              name
                              )
                            )
               )
  )
;;; Creates subfolders as subobjects of the folder-collection of type folder-info-model  
(define-class folder-collection
  :inherit-from (series-object)
  :properties (
               
               ;; Removing ../ and ./
               library-subfolder-list (rest (rest (directory #mechanism-library#)) )
               quantity (length ^library-subfolder-list)
               class-expression 'folder-info-model
               series-prefix 'folder
               init-form '(
                           path (nth ^index ^^library-subfolder-list)
                           )
               )
  )


;;; Creates the different collections (constraint, point, link, shape and meshdb) as subobjects and categorizes in subfolders
(define-class mechanism-collection
  :inherit-from (data-model-node-mixin)
  :properties (
               point-ref-list  (children ^points :class 'point-data-model )
               constraints-ref-list (children ^constraints :class 'master-joint-model)
               link-ref-list (children ^links :class 'link-model-class)

               (mechanism-selection :class 'option-property-class
                   labels-list (loop for subfolder in (children ^folders :class 'folder-info-model)
                                when (the path (:from subfolder))
                                collect (the label (:from subfolder))
                                )
                   options-list (children ^folders :class 'folder-info-model)
                   
                   mode 'menu
                   formula (nth (position "four bar" !labels-list) !options-list)
                   )
               
               property-objects-list (list 
                                      (list (the superior mechanism-selection self) 
                                            '(automatic-apply? t))
                                     )
;;;                Storage
               (folders :class 'folder-collection
                   )

               write-to-file (write-save-fedem-solver !superior)
               )
  :subobjects (
               (constraints :class 'constraint-collection
                   )
               (points :class 'point-collection
                   )
               (links :class 'link-collection
                   )
               (shapes :class 'shape-collection
                   )
               (mesh-database :class 'meshdb-class
                   )
               )
  )
;;; Writes the mechanism to a simulation file (.fsi)
(define-method write-save-fedem-solver  mechanism-collection ()
  (let (
        (idcount 10)
        (extidcount 0)
        (superelements nil)
        (triads nil)
        )
    (with-open-file (stream (logical-path (the path (:from !mechanism-selection)) (concatenate "fedem_solver" ".fsi") )
                          :direction :output
                          :if-exists :overwrite
                          )
      (progn
        (loop for link in !link-ref-list         
          do
          (setf idcount (1+ idcount))
          (setf extidcount (1+ extidcount))
          (setf superelements (append superelements (list idcount)))
          
          (loop for triad in (the solid-constraints-ref-list (:from link))
            for frame =  (vector-to-list (get-position-matrix (the main-frame (:from triad)) ) )
            when (not (and (equal 0 (the index (:from link))) (equal "open" (superior (the constraint-element (:from triad)))) ))
            do
            (setf idcount (1+ idcount))
            (setf extidcount (1+ extidcount))
            (format stream "~a~%" "&TRIAD")
            (format stream "~t id = ~d~%" idcount)
            (format stream "~t extId = ~d~%" extidcount)
            (format stream "~t nDOFs = ~d~%" (if (equal 0 (the index (:from link))) 0 6) )
            (format stream "~t ur = ~{~{~1,9e ~}~%~6t ~}"  (list (append (subseq frame 0 3) (list (nth 12 frame)))
                                                                 (append (subseq frame 4 7) (list (nth 13 frame)))
                                                                 (append (subseq frame 8 11) (list (nth 14 frame)))
                                                                 ) )
            (format stream "~%/~2%")
            
            and collect idcount into trs
            finally (setf triads (append triads (list trs)))  
            )
          
          )
        (print triads)
        (setf extidcount 0)
        (loop for link in !link-ref-list
          for id = (the index (:from link))
          for triader = (nth id triads)
          for frame =  (vector-to-list (get-position-matrix (the main-frame (:from (nth 0 (the solid-constraints-ref-list (:from link)))) ) ) )
          when (not (equal 0 id ) )
          do
          (setf idcount (1+ idcount))
          (format stream "~a~%" "&SUP_EL")
          (format stream "~t id = ~d~%" idcount)
          (format stream "~t extId = ~d~%" id)
          (format stream "~t numGenDOFs = 0~%")
          (format stream "~t numTriads = ~d~%" (length triader))
          (format stream "~t triadIds = ~{~d ~}~%" triader)
          (format stream "~t shadowPosAlg = 1~%")
          (format stream "~t massCorrFlag = -1~%")
          (format stream "~t stiffScale = 1.0~%")
          (format stream "~t massScale = 1.0~%")
          (format stream "~t alpha1 = 0.0, alpha2 = 0.0~%")
          (format stream "~t subPos = ~{~{~1,9e ~}~%~6t ~}"  (list (append (subseq frame 0 3) (list (nth 12 frame)))
                                                                   (append (subseq frame 4 7) (list (nth 13 frame)))
                                                                   (append (subseq frame 8 11) (list (nth 14 frame)))
                                                                                  ) )
          (format stream "~%/~2%")
          (print (the solid-constraints-ref-list (:from link)) )
          (loop for triad in (the solid-constraints-ref-list (:from link))
            for i = (the index (:from triad) )
            do
            (print i)
            (print triader)
            (format stream "~a~%" "&TRIAD_UNDPOS")
            (format stream "~t supElId = ~d~%" idcount)
            (format stream "~t triadId = ~d~%" (nth i triader) )
            (format stream "~%/~2%")
           )
          )
        )
      )
    )
  )